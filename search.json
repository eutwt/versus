[{"path":"https://eutwt.github.io/versus/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 versus authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://eutwt.github.io/versus/articles/Benchmark.html","id":"benchmark-code","dir":"Articles","previous_headings":"","what":"Benchmark code:","title":"Benchmark","text":"","code":"suppressPackageStartupMessages(library(dplyr))  generate_example_data <- function(n_rows) {   tbl <- nycflights13::weather |>     slice_sample(n = n_rows, replace = TRUE) |>     # simulate unique key     mutate(time_hour = Sys.time() + row_number())    tbl_a <- tbl |>     slice_sample(n = floor(n_rows * 0.95))   tbl_b <- tbl |>     slice_sample(n = floor(n_rows * 0.95)) |>     # simulate value differences     mutate(across(temp:wind_dir, \\(x) ifelse(runif(n()) < .05, x + 1, x)))   list(a = tbl_a, b = tbl_b) }  bench_out <- bench::press(   n_rows = c(1e5, 1e6, 2e6),   {     tbl <- generate_example_data(n_rows)     bench::mark(       versus =         versus::compare(tbl$a, tbl$b, by = c(origin, time_hour)),       arsenal =         arsenal::comparedf(tbl$a, tbl$b, by = c(\"origin\", \"time_hour\")),       dataCompareR =         dataCompareR::rCompare(tbl$a, tbl$b, keys = c(\"origin\", \"time_hour\")),       diffdf =         diffdf::diffdf(tbl$a, tbl$b, keys = c(\"origin\", \"time_hour\"), suppress_warnings = TRUE),       min_iterations = 2,       max_iterations = 2,       check = FALSE     )   } )"},{"path":"https://eutwt.github.io/versus/articles/Benchmark.html","id":"benchmark-results","dir":"Articles","previous_headings":"","what":"Benchmark results:","title":"Benchmark","text":"","code":"# benchmark run on 2020 i7 MBP with 32GB of memory bench_out |>   summary() |>   mutate(across(n_rows, scales::comma)) |>   select(1:6) |>   print(n = Inf) #> # A tibble: 12 × 6 #>    expression   n_rows         min   median `itr/sec` mem_alloc #>    <bch:expr>   <chr>     <bch:tm> <bch:tm>     <dbl> <bch:byt> #>  1 versus       100,000    59.49ms  62.94ms  15.9       64.58MB #>  2 arsenal      100,000   958.93ms    1.09s   0.913    388.97MB #>  3 dataCompareR 100,000      1.41s    1.43s   0.698    265.37MB #>  4 diffdf       100,000      4.73s    4.75s   0.211    554.93MB #>  5 versus       1,000,000 536.28ms 586.81ms   1.70     648.99MB #>  6 arsenal      1,000,000   12.86s   13.08s   0.0765     3.89GB #>  7 dataCompareR 1,000,000   17.16s   17.25s   0.0580     2.63GB #>  8 diffdf       1,000,000    56.2s   56.93s   0.0176     5.35GB #>  9 versus       2,000,000    1.35s    1.37s   0.732      1.27GB #> 10 arsenal      2,000,000   29.47s    30.5s   0.0328     7.54GB #> 11 dataCompareR 2,000,000   36.16s   37.32s   0.0268     5.27GB #> 12 diffdf       2,000,000    2.03m    2.09m   0.00796   10.83GB"},{"path":"https://eutwt.github.io/versus/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ryan Dickerson. Author, maintainer, copyright holder.","code":""},{"path":"https://eutwt.github.io/versus/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dickerson R (2023). versus: Compare Data Frames. R package version 0.2.1.9000, https://github.com/eutwt/versus, https://eutwt.github.io/versus/.","code":"@Manual{,   title = {versus: Compare Data Frames},   author = {Ryan Dickerson},   year = {2023},   note = {R package version 0.2.1.9000, https://github.com/eutwt/versus},   url = {https://eutwt.github.io/versus/}, }"},{"path":"https://eutwt.github.io/versus/index.html","id":"versus-","dir":"","previous_headings":"","what":"Compare Data Frames","title":"Compare Data Frames","text":"difference two data frames list data frames.","code":""},{"path":"https://eutwt.github.io/versus/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Compare Data Frames","text":"","code":"install.packages(\"versus\")  # Or install the development version from GitHub with # pak::pak(\"eutwt/versus\")"},{"path":"https://eutwt.github.io/versus/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Compare Data Frames","text":"two data frames used example demonstrate functionality Use compare() create comparison two tables. comparison contains: compare()$intersection: columns tables rows differing values compare()$unmatched_cols: columns one table compare()$unmatched_rows: rows one table Use value_diffs() see values different. Use weave_diffs_*() see differing values context. Use slice_diffs() get rows differing values one table. Use slice_unmatched() get rows unmatched rows one tables. Use summary() see kind differences found","code":"library(versus)  example_df_a #> # A tibble: 9 × 9 #>   car              mpg   cyl  disp    hp  drat    wt    vs    am #>   <chr>          <dbl> <int> <dbl> <int> <dbl> <dbl> <int> <int> #> 1 Duster 360      14.3     8  360    245  3.21  3.57     0     0 #> 2 Mazda RX4 Wag   21       6  160    110  3.9   2.88     0     1 #> 3 Merc 230        22.8     4  141.    95  3.92  3.15     1     0 #> 4 Datsun 710      22.8    NA  109     93  3.85  2.32     1     1 #> 5 Merc 240D       24.4     4  147.    62  3.69  3.19     1     0 #> 6 Hornet 4 Drive  21.4     6  259    110  3.08  3.22     1     0 #> 7 Mazda RX4       21       6  160    110  3.9   2.62     0     1 #> 8 Valiant         18.1     6  225    105  2.76  3.46     1     0 #> 9 Merc 280        19.2     6  168.   123  3.92  3.44     1     0 example_df_b #> # A tibble: 10 × 9 #>    car               wt   mpg    hp   cyl  disp  carb  drat    vs #>    <chr>          <dbl> <dbl> <int> <int> <dbl> <int> <dbl> <int> #>  1 Merc 240D       3.19  26.4    62     4  147.     2  3.69     1 #>  2 Valiant         3.46  18.1   105     6  225      1  2.76     1 #>  3 Duster 360      3.57  16.3   245     8  360      4  3.21     0 #>  4 Datsun 710      2.32  22.8    93    NA  108      1  3.85     1 #>  5 Merc 280C       3.44  17.8   123     6  168.     4  3.92     1 #>  6 Merc 280        3.44  19.2   123     6  168.     4  3.92     1 #>  7 Hornet 4 Drive  3.22  21.4   110     6  258      1  3.08     1 #>  8 Merc 450SE      4.07  16.4   180     8  276.     3  3.07     0 #>  9 Merc 230        3.15  22.8    95     4  141.     2  3.92     1 #> 10 Mazda RX4 Wag   2.88  21     110     6  160      4  3.9      0 comparison <- compare(example_df_a, example_df_b, by = car) comparison #> $tables #> # A tibble: 2 × 4 #>   table   expr          nrow  ncol #>   <chr>   <chr>        <int> <int> #> 1 table_a example_df_a     9     9 #> 2 table_b example_df_b    10     9 #>  #> $by #> # A tibble: 1 × 3 #>   column class_a   class_b   #>   <chr>  <chr>     <chr>     #> 1 car    character character #>  #> $intersection #> # A tibble: 7 × 5 #>   column n_diffs class_a class_b diff_rows        #>   <chr>    <int> <chr>   <chr>   <list>           #> 1 mpg          2 numeric numeric <tibble [2 × 2]> #> 2 cyl          0 integer integer <tibble [0 × 2]> #> 3 disp         2 numeric numeric <tibble [2 × 2]> #> 4 hp           0 integer integer <tibble [0 × 2]> #> 5 drat         0 numeric numeric <tibble [0 × 2]> #> 6 wt           0 numeric numeric <tibble [0 × 2]> #> 7 vs           0 integer integer <tibble [0 × 2]> #>  #> $unmatched_cols #> # A tibble: 2 × 2 #>   table column #>   <chr> <chr>  #> 1 a     am     #> 2 b     carb   #>  #> $unmatched_rows #> # A tibble: 3 × 3 #>   table car          row #>   <chr> <chr>      <int> #> 1 a     Mazda RX4      7 #> 2 b     Merc 280C      5 #> 3 b     Merc 450SE     8 comparison |>   value_diffs(disp) #> # A tibble: 2 × 3 #>   disp_a disp_b car            #>    <dbl>  <dbl> <chr>          #> 1    109    108 Datsun 710     #> 2    259    258 Hornet 4 Drive comparison |>   value_diffs_stacked(c(mpg, disp)) #> # A tibble: 4 × 4 #>   column val_a val_b car            #>   <chr>  <dbl> <dbl> <chr>          #> 1 mpg     14.3  16.3 Duster 360     #> 2 mpg     24.4  26.4 Merc 240D      #> 3 disp   109   108   Datsun 710     #> 4 disp   259   258   Hornet 4 Drive comparison |>   weave_diffs_wide(disp) #> # A tibble: 2 × 9 #>   car              mpg   cyl disp_a disp_b    hp  drat    wt    vs #>   <chr>          <dbl> <int>  <dbl>  <dbl> <int> <dbl> <dbl> <int> #> 1 Datsun 710      22.8    NA    109    108    93  3.85  2.32     1 #> 2 Hornet 4 Drive  21.4     6    259    258   110  3.08  3.22     1 comparison |>   weave_diffs_wide(c(mpg, disp)) #> # A tibble: 4 × 10 #>   car            mpg_a mpg_b   cyl disp_a disp_b    hp  drat    wt    vs #>   <chr>          <dbl> <dbl> <int>  <dbl>  <dbl> <int> <dbl> <dbl> <int> #> 1 Duster 360      14.3  16.3     8   360    360    245  3.21  3.57     0 #> 2 Merc 240D       24.4  26.4     4   147.   147.    62  3.69  3.19     1 #> 3 Datsun 710      22.8  22.8    NA   109    108     93  3.85  2.32     1 #> 4 Hornet 4 Drive  21.4  21.4     6   259    258    110  3.08  3.22     1 comparison |>   weave_diffs_long(disp) #> # A tibble: 4 × 9 #>   table car              mpg   cyl  disp    hp  drat    wt    vs #>   <chr> <chr>          <dbl> <int> <dbl> <int> <dbl> <dbl> <int> #> 1 a     Datsun 710      22.8    NA   109    93  3.85  2.32     1 #> 2 b     Datsun 710      22.8    NA   108    93  3.85  2.32     1 #> 3 a     Hornet 4 Drive  21.4     6   259   110  3.08  3.22     1 #> 4 b     Hornet 4 Drive  21.4     6   258   110  3.08  3.22     1 comparison |>   slice_diffs(\"a\", mpg) #> # A tibble: 2 × 9 #>   car          mpg   cyl  disp    hp  drat    wt    vs    am #>   <chr>      <dbl> <int> <dbl> <int> <dbl> <dbl> <int> <int> #> 1 Duster 360  14.3     8  360    245  3.21  3.57     0     0 #> 2 Merc 240D   24.4     4  147.    62  3.69  3.19     1     0 comparison |>   slice_unmatched(\"a\") #> # A tibble: 1 × 9 #>   car         mpg   cyl  disp    hp  drat    wt    vs    am #>   <chr>     <dbl> <int> <dbl> <int> <dbl> <dbl> <int> <int> #> 1 Mazda RX4    21     6   160   110   3.9  2.62     0     1 comparison |>   slice_unmatched_both() #> # A tibble: 3 × 9 #>   table car          mpg   cyl  disp    hp  drat    wt    vs #>   <chr> <chr>      <dbl> <int> <dbl> <int> <dbl> <dbl> <int> #> 1 a     Mazda RX4   21       6  160    110  3.9   2.62     0 #> 2 b     Merc 280C   17.8     6  168.   123  3.92  3.44     1 #> 3 b     Merc 450SE  16.4     8  276.   180  3.07  4.07     0 summary(comparison) #> # A tibble: 4 × 2 #>   difference     found #>   <chr>          <lgl> #> 1 value_diffs    TRUE  #> 2 unmatched_cols TRUE  #> 3 unmatched_rows TRUE  #> 4 class_diffs    FALSE"},{"path":"https://eutwt.github.io/versus/reference/compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare two data frames — compare","title":"Compare two data frames — compare","text":"compare() creates representation differences two tables, along shallow copy tables. output used comparison argument exploring differences versus functions e.g. slice_*() weave_*(). Note input data.table, deep copy made prevent future changes table affecting comparison. avoid deep copy, use setDF() supplying compare(), set options(versus.copy_data_table = FALSE).","code":""},{"path":"https://eutwt.github.io/versus/reference/compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare two data frames — compare","text":"","code":"compare(table_a, table_b, by, allow_both_NA = TRUE, coerce = TRUE)"},{"path":"https://eutwt.github.io/versus/reference/compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare two data frames — compare","text":"table_a data frame table_b data frame <tidy-select>. Selection columns use matching rows .data_a .data_b. data frames must unique . allow_both_NA Logical. TRUE missing value data frames considered equal coerce Logical. FALSE columns input tables differing classes, function throws error.","code":""},{"path":"https://eutwt.github.io/versus/reference/compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare two data frames — compare","text":"compare() list data frames following elements: tables data frame one row per input table showing number rows columns . data frame one row per column showing class column input tables. intersection data frame one row per column common table_a table_b columns \"n_diffs\" showing number values different two tables, \"class_a\"/\"class_b\" class column table, \"value_diffs\" (nested) data frame showing values table unequal columns unmatched_cols data frame one row per column one input table columns \"table\": table column appears , \"column\": name column, \"class\": class column. unmatched_rows data frame , row present one input table , contains column \"table\" showing table row appears columns row.","code":""},{"path":"https://eutwt.github.io/versus/reference/compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare two data frames — compare","text":"","code":"compare(example_df_a, example_df_b, by = car) #> $tables #> # A tibble: 2 × 4 #>   table   expr          nrow  ncol #>   <chr>   <chr>        <int> <int> #> 1 table_a example_df_a     9     9 #> 2 table_b example_df_b    10     9 #>  #> $by #> # A tibble: 1 × 3 #>   column class_a   class_b   #>   <chr>  <chr>     <chr>     #> 1 car    character character #>  #> $intersection #> # A tibble: 7 × 5 #>   column n_diffs class_a class_b diff_rows        #>   <chr>    <int> <chr>   <chr>   <list>           #> 1 mpg          2 numeric numeric <tibble [2 × 2]> #> 2 cyl          0 integer integer <tibble [0 × 2]> #> 3 disp         2 numeric numeric <tibble [2 × 2]> #> 4 hp           0 integer integer <tibble [0 × 2]> #> 5 drat         0 numeric numeric <tibble [0 × 2]> #> 6 wt           0 numeric numeric <tibble [0 × 2]> #> 7 vs           0 integer integer <tibble [0 × 2]> #>  #> $unmatched_cols #> # A tibble: 2 × 2 #>   table column #>   <chr> <chr>  #> 1 a     am     #> 2 b     carb   #>  #> $unmatched_rows #> # A tibble: 3 × 3 #>   table car          row #>   <chr> <chr>      <int> #> 1 a     Mazda RX4      7 #> 2 b     Merc 280C      5 #> 3 b     Merc 450SE     8 #>"},{"path":"https://eutwt.github.io/versus/reference/example_df_a.html","id":null,"dir":"Reference","previous_headings":"","what":"Modified version of datasets::mtcars - version a — example_df_a","title":"Modified version of datasets::mtcars - version a — example_df_a","text":"version mtcars values altered rows/columns removed. informational purposes, used demonstrate comparison two slightly different data frames. Since values altered random, values necessarily reflect true original values. variables follows:","code":""},{"path":"https://eutwt.github.io/versus/reference/example_df_a.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modified version of datasets::mtcars - version a — example_df_a","text":"","code":"example_df_a"},{"path":"https://eutwt.github.io/versus/reference/example_df_a.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Modified version of datasets::mtcars - version a — example_df_a","text":"data frame 9 rows 9 variables: car rowname corresponding datasets::mtcars row mpg Miles/(US) gallon cyl Number cylinders disp Displacement (cu..) hp Gross horsepower drat Rear axle ratio wt Weight (1000 lbs) vs Engine (0 = V-shaped, 1 = straight) Transmission (0 = automatic, 1 = manual)","code":""},{"path":"https://eutwt.github.io/versus/reference/example_df_a.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Modified version of datasets::mtcars - version a — example_df_a","text":"Sourced CRAN datasets package, modified values. Originally Henderson Velleman (1981), Building multiple regression models interactively. Biometrics, 37, 391–411.","code":""},{"path":"https://eutwt.github.io/versus/reference/example_df_b.html","id":null,"dir":"Reference","previous_headings":"","what":"Modified version of datasets::mtcars - version b — example_df_b","title":"Modified version of datasets::mtcars - version b — example_df_b","text":"version mtcars values altered rows/columns removed. informational purposes, used demonstrate comparison two slightly different data frames. Since values altered random, values necessarily reflect true original values. variables follows:","code":""},{"path":"https://eutwt.github.io/versus/reference/example_df_b.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modified version of datasets::mtcars - version b — example_df_b","text":"","code":"example_df_b"},{"path":"https://eutwt.github.io/versus/reference/example_df_b.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Modified version of datasets::mtcars - version b — example_df_b","text":"data frame 9 rows 9 variables: car rowname corresponding datasets::mtcars row wt Weight (1000 lbs) mpg Miles/(US) gallon hp Gross horsepower cyl Number cylinders disp Displacement (cu..) carb Number carburetors drat Rear axle ratio vs Engine (0 = V-shaped, 1 = straight)","code":""},{"path":"https://eutwt.github.io/versus/reference/example_df_b.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Modified version of datasets::mtcars - version b — example_df_b","text":"Sourced CRAN datasets package, modified values. Originally Henderson Velleman (1981), Building multiple regression models interactively. Biometrics, 37, 391–411.","code":""},{"path":"https://eutwt.github.io/versus/reference/slice_diffs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get rows with differing values — slice_diffs","title":"Get rows with differing values — slice_diffs","text":"Get rows differing values","code":""},{"path":"https://eutwt.github.io/versus/reference/slice_diffs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get rows with differing values — slice_diffs","text":"","code":"slice_diffs(comparison, table, column = everything())"},{"path":"https://eutwt.github.io/versus/reference/slice_diffs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get rows with differing values — slice_diffs","text":"comparison output compare() table One \"\" \"b\" indicating tables used create comparison sliced column <tidy-select>. row output comparison shows differing values columns matching argument","code":""},{"path":"https://eutwt.github.io/versus/reference/slice_diffs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get rows with differing values — slice_diffs","text":"input table filtered rows comparison shows differing values one columns selected column","code":""},{"path":"https://eutwt.github.io/versus/reference/slice_diffs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get rows with differing values — slice_diffs","text":"","code":"comp <- compare(example_df_a, example_df_b, by = car) comp |> slice_diffs(\"a\", mpg) #> # A tibble: 2 × 9 #>   car          mpg   cyl  disp    hp  drat    wt    vs    am #>   <chr>      <dbl> <int> <dbl> <int> <dbl> <dbl> <int> <int> #> 1 Duster 360  14.3     8  360    245  3.21  3.57     0     0 #> 2 Merc 240D   24.4     4  147.    62  3.69  3.19     1     0 comp |> slice_diffs(\"b\", mpg) #> # A tibble: 2 × 9 #>   car           wt   mpg    hp   cyl  disp  carb  drat    vs #>   <chr>      <dbl> <dbl> <int> <int> <dbl> <int> <dbl> <int> #> 1 Duster 360  3.57  16.3   245     8  360      4  3.21     0 #> 2 Merc 240D   3.19  26.4    62     4  147.     2  3.69     1 comp |> slice_diffs(\"a\", c(mpg, disp)) #> # A tibble: 4 × 9 #>   car              mpg   cyl  disp    hp  drat    wt    vs    am #>   <chr>          <dbl> <int> <dbl> <int> <dbl> <dbl> <int> <int> #> 1 Duster 360      14.3     8  360    245  3.21  3.57     0     0 #> 2 Merc 240D       24.4     4  147.    62  3.69  3.19     1     0 #> 3 Datsun 710      22.8    NA  109     93  3.85  2.32     1     1 #> 4 Hornet 4 Drive  21.4     6  259    110  3.08  3.22     1     0"},{"path":"https://eutwt.github.io/versus/reference/slice_unmatched.html","id":null,"dir":"Reference","previous_headings":"","what":"Get rows in only one table — slice_unmatched","title":"Get rows in only one table — slice_unmatched","text":"Get rows one table","code":""},{"path":"https://eutwt.github.io/versus/reference/slice_unmatched.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get rows in only one table — slice_unmatched","text":"","code":"slice_unmatched(comparison, table)  slice_unmatched_both(comparison)"},{"path":"https://eutwt.github.io/versus/reference/slice_unmatched.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get rows in only one table — slice_unmatched","text":"comparison output compare() table One \"\" \"b\" indicating tables used create comparison sliced","code":""},{"path":"https://eutwt.github.io/versus/reference/slice_unmatched.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get rows in only one table — slice_unmatched","text":"slice_unmatched() table identified table filtered rows comparison shows appearing table slice_unmatched_both() output slice_unmatched() input tables row-stacked column table indicating table row . output contains columns present tables.","code":""},{"path":"https://eutwt.github.io/versus/reference/slice_unmatched.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get rows in only one table — slice_unmatched","text":"","code":"comp <- compare(example_df_a, example_df_b, by = car) comp |> slice_unmatched(\"a\") #> # A tibble: 1 × 9 #>   car         mpg   cyl  disp    hp  drat    wt    vs    am #>   <chr>     <dbl> <int> <dbl> <int> <dbl> <dbl> <int> <int> #> 1 Mazda RX4    21     6   160   110   3.9  2.62     0     1 comp |> slice_unmatched(\"b\") #> # A tibble: 2 × 9 #>   car           wt   mpg    hp   cyl  disp  carb  drat    vs #>   <chr>      <dbl> <dbl> <int> <int> <dbl> <int> <dbl> <int> #> 1 Merc 280C   3.44  17.8   123     6  168.     4  3.92     1 #> 2 Merc 450SE  4.07  16.4   180     8  276.     3  3.07     0  # slice_unmatched(comp, \"a\") output is the same as example_df_a |> dplyr::anti_join(example_df_b, by = comp$by$column) #> # A tibble: 1 × 9 #>   car         mpg   cyl  disp    hp  drat    wt    vs    am #>   <chr>     <dbl> <int> <dbl> <int> <dbl> <dbl> <int> <int> #> 1 Mazda RX4    21     6   160   110   3.9  2.62     0     1  comp |> slice_unmatched_both() #> # A tibble: 3 × 9 #>   table car          mpg   cyl  disp    hp  drat    wt    vs #>   <chr> <chr>      <dbl> <int> <dbl> <int> <dbl> <dbl> <int> #> 1 a     Mazda RX4   21       6  160    110  3.9   2.62     0 #> 2 b     Merc 280C   17.8     6  168.   123  3.92  3.44     1 #> 3 b     Merc 450SE  16.4     8  276.   180  3.07  4.07     0"},{"path":"https://eutwt.github.io/versus/reference/value-diffs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the differing values from a comparison — value_diffs","title":"Get the differing values from a comparison — value_diffs","text":"Get differing values comparison","code":""},{"path":"https://eutwt.github.io/versus/reference/value-diffs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the differing values from a comparison — value_diffs","text":"","code":"value_diffs(comparison, column)  value_diffs_stacked(comparison, column = everything())"},{"path":"https://eutwt.github.io/versus/reference/value-diffs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the differing values from a comparison — value_diffs","text":"comparison output compare() column <tidy-select>. output show differing values provided columns.","code":""},{"path":"https://eutwt.github.io/versus/reference/value-diffs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the differing values from a comparison — value_diffs","text":"value_diffs() data frame one row element col found unequal input tables ( table_a table_b original compare() output) output table column specified column input tables, plus columns. value_diffs_stacked(), value_diffs_all() data frame containing value_diffs() outputs specified columns combined row-wise using dplyr::bind_rows(). dplyr::bind_rows() possible due incompatible types, values converted character first. value_diffs_all() value_diffs_stacked() column = everything()","code":""},{"path":"https://eutwt.github.io/versus/reference/value-diffs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the differing values from a comparison — value_diffs","text":"","code":"comp <- compare(example_df_a, example_df_b, by = car) value_diffs(comp, disp) #> # A tibble: 2 × 3 #>   disp_a disp_b car            #>    <dbl>  <dbl> <chr>          #> 1    109    108 Datsun 710     #> 2    259    258 Hornet 4 Drive value_diffs_stacked(comp, c(disp, mpg)) #> # A tibble: 4 × 4 #>   column val_a val_b car            #>   <chr>  <dbl> <dbl> <chr>          #> 1 mpg     14.3  16.3 Duster 360     #> 2 mpg     24.4  26.4 Merc 240D      #> 3 disp   109   108   Datsun 710     #> 4 disp   259   258   Hornet 4 Drive"},{"path":"https://eutwt.github.io/versus/reference/versus-package.html","id":null,"dir":"Reference","previous_headings":"","what":"versus: Compare Data Frames — versus-package","title":"versus: Compare Data Frames — versus-package","text":"Compare two tables","code":""},{"path":[]},{"path":"https://eutwt.github.io/versus/reference/versus-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"versus: Compare Data Frames — versus-package","text":"Maintainer: Ryan Dickerson fresh.tent5866@fastmail.com [copyright holder]","code":""},{"path":"https://eutwt.github.io/versus/reference/versus_tidy_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Argument type: tidy-select — versus_tidy_select","title":"Argument type: tidy-select — versus_tidy_select","text":"page describes <tidy-select> argument modifier indicates argument uses tidy selection, sub-type tidy evaluation. never heard tidy evaluation , start practical introduction https://r4ds.hadley.nz/functions.html#data-frame-functions read underlying theory https://rlang.r-lib.org/reference/topic-data-mask.html.","code":""},{"path":"https://eutwt.github.io/versus/reference/versus_tidy_select.html","id":"overview-of-selection-features","dir":"Reference","previous_headings":"","what":"Overview of selection features","title":"Argument type: tidy-select — versus_tidy_select","text":"tidyselect implements DSL selecting variables. provides helpers selecting variables: var1:var10: variables lying var1 left var10 right. starts_with(\"\"): names start \"\". ends_with(\"z\"): names end \"z\". contains(\"b\"): names contain \"b\". matches(\"x.y\"): names match regular expression x.y. num_range(x, 1:4): names following pattern, x1, x2, ..., x4. all_of(vars)/any_of(vars): matches names stored character vector vars. all_of(vars) error variables present; any_of(var) match just variables exist. everything(): variables. last_col(): furthest column right. (.numeric): variables .numeric() returns TRUE. well operators combining selections: !selection: variables match selection. selection1 & selection2: variables included selection1 selection2. selection1 | selection2: variables match either selection1 selection2.","code":""},{"path":"https://eutwt.github.io/versus/reference/versus_tidy_select.html","id":"key-techniques","dir":"Reference","previous_headings":"","what":"Key techniques","title":"Argument type: tidy-select — versus_tidy_select","text":"want user supply tidyselect specification function argument, need tunnel selection function argument. done embracing function argument {{ }}, e.g unnest(df, {{ vars }}). character vector column names, use all_of() any_of(), depending whether want unknown variable names cause error, e.g unnest(df, all_of(vars)), unnest(df, !any_of(vars)). suppress R CMD check NOTEs unknown variables use \"var\" instead var:","code":"# has NOTE df %>% select(x, y, z)  # no NOTE df %>% select(\"x\", \"y\", \"z\")"},{"path":"https://eutwt.github.io/versus/reference/weave_diffs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get differences in context — weave_diffs_long","title":"Get differences in context — weave_diffs_long","text":"Get differences context","code":""},{"path":"https://eutwt.github.io/versus/reference/weave_diffs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get differences in context — weave_diffs_long","text":"","code":"weave_diffs_long(comparison, column = everything())  weave_diffs_wide(comparison, column = everything())"},{"path":"https://eutwt.github.io/versus/reference/weave_diffs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get differences in context — weave_diffs_long","text":"comparison output compare() column <tidy-select>. row output comparison shows differing values columns matching argument","code":""},{"path":"https://eutwt.github.io/versus/reference/weave_diffs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get differences in context — weave_diffs_long","text":"weave_diffs_wide() input table_a filtered rows differing values exist one columns selected column. selected columns differences result twice, one input table. weave_diffs_long() Input tables filtered rows differing values exist one columns selected column. two sets rows (one input table) interleaved row-wise.","code":""},{"path":"https://eutwt.github.io/versus/reference/weave_diffs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get differences in context — weave_diffs_long","text":"","code":"comp <- compare(example_df_a, example_df_b, by = car) comp |> weave_diffs_wide(disp) #> # A tibble: 2 × 9 #>   car              mpg   cyl disp_a disp_b    hp  drat    wt    vs #>   <chr>          <dbl> <int>  <dbl>  <dbl> <int> <dbl> <dbl> <int> #> 1 Datsun 710      22.8    NA    109    108    93  3.85  2.32     1 #> 2 Hornet 4 Drive  21.4     6    259    258   110  3.08  3.22     1 comp |> weave_diffs_wide(c(mpg, disp)) #> # A tibble: 4 × 10 #>   car            mpg_a mpg_b   cyl disp_a disp_b    hp  drat    wt    vs #>   <chr>          <dbl> <dbl> <int>  <dbl>  <dbl> <int> <dbl> <dbl> <int> #> 1 Duster 360      14.3  16.3     8   360    360    245  3.21  3.57     0 #> 2 Merc 240D       24.4  26.4     4   147.   147.    62  3.69  3.19     1 #> 3 Datsun 710      22.8  22.8    NA   109    108     93  3.85  2.32     1 #> 4 Hornet 4 Drive  21.4  21.4     6   259    258    110  3.08  3.22     1 comp |> weave_diffs_long(disp) #> # A tibble: 4 × 9 #>   table car              mpg   cyl  disp    hp  drat    wt    vs #>   <chr> <chr>          <dbl> <int> <dbl> <int> <dbl> <dbl> <int> #> 1 a     Datsun 710      22.8    NA   109    93  3.85  2.32     1 #> 2 b     Datsun 710      22.8    NA   108    93  3.85  2.32     1 #> 3 a     Hornet 4 Drive  21.4     6   259   110  3.08  3.22     1 #> 4 b     Hornet 4 Drive  21.4     6   258   110  3.08  3.22     1 comp |> weave_diffs_long(c(mpg, disp)) #> # A tibble: 8 × 9 #>   table car              mpg   cyl  disp    hp  drat    wt    vs #>   <chr> <chr>          <dbl> <int> <dbl> <int> <dbl> <dbl> <int> #> 1 a     Duster 360      14.3     8  360    245  3.21  3.57     0 #> 2 b     Duster 360      16.3     8  360    245  3.21  3.57     0 #> 3 a     Merc 240D       24.4     4  147.    62  3.69  3.19     1 #> 4 b     Merc 240D       26.4     4  147.    62  3.69  3.19     1 #> 5 a     Datsun 710      22.8    NA  109     93  3.85  2.32     1 #> 6 b     Datsun 710      22.8    NA  108     93  3.85  2.32     1 #> 7 a     Hornet 4 Drive  21.4     6  259    110  3.08  3.22     1 #> 8 b     Hornet 4 Drive  21.4     6  258    110  3.08  3.22     1"},{"path":"https://eutwt.github.io/versus/news/index.html","id":"versus-development-version","dir":"Changelog","previous_headings":"","what":"versus (development version)","title":"versus (development version)","text":"compare() function now saves shallow copy input tables. means functions using comparison, e.g. slice_diffs(), now need comparison argument, rather requiring original input tables re-supplied. New functions weave_diffs_wide() weave_diffs_long() added, show differing values context columns input tables. new function slice_unmatched() added, used get rows input tables comparison shows existing table","code":""},{"path":"https://eutwt.github.io/versus/news/index.html","id":"versus-021","dir":"Changelog","previous_headings":"","what":"versus 0.2.1","title":"versus 0.2.1","text":"CRAN release: 2023-12-11 Patch avoid error input data.table","code":""},{"path":"https://eutwt.github.io/versus/news/index.html","id":"versus-020","dir":"Changelog","previous_headings":"","what":"versus 0.2.0","title":"versus 0.2.0","text":"CRAN release: 2023-12-10 new function slice_diffs_both() added, used get differences input tables single output rows interleaved error message duplicated values now shows row duplicated Comparisons now faster","code":""},{"path":"https://eutwt.github.io/versus/news/index.html","id":"versus-010","dir":"Changelog","previous_headings":"","what":"versus 0.1.0","title":"versus 0.1.0","text":"CRAN release: 2023-11-12 Initial CRAN submission.","code":""}]
